## Check basic lexer operations
# White spaces
                        # Error (empty expression)
Sin[     2         ]

# Numeric values
# Integer
2
1234567890
9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999    # Warning

# Integer with exponent
1e2
1e0
1e02
1e-2
1e+2
0e01
1e-99999
1e99999 # Warning
9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999e-100   # No warning
1e      # Parsed as 1 * e
1e+-2   # Parsed as 1 * e + -2
1e*2    # Parsed as 1 * e * 2
1e-0.2  # Parsed as 1e-0 * 0.2
1e-.2   # Parsed as 1 * e - 0.2
1e+.2   # Parsed as 1 * e + 0.2
1e.2    # Parsed as 1 * e * 0.2
1e23.4  # Parsed as 1e23 * 0.4
1ee2    # Parsed as 1 * ee2
1e23e4  # Parsed as 1e23 * e4

# Float
2.3
1234567890.1234567890
9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.   # Warning
2.
.2
.       # Error (unknown token)
2.34.   # Parsed as 2.3 * 4.0
.23.4   # Parsed as 0.23 * 0.3
..2     # Error (unknown token)
2..     # Error (unknown token)
.2.     # Error (unknown token)

# Float with exponent
1.e2
1.e0
1.e02
1.e-2
1.e+2
0.e01
.2e2
.e2     # Error (unknown token)
1.e-99999
1.e9999 # Warning
9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.e-100   # No warning
0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e+100   # Not 0
1.e     # Parsed as 1.0 * e
1.e+-2  # Parsed as 1.0 * e + -2
1.e*2   # Parsed as 1.0 * e * 2
1.e-0.2 # Parsed as 1.e-0 * 0.2
1.e-.2  # Parsed as 1.0 * e - 0.2
1.e+.2  # Parsed as 1.0 * e + 0.2
1.e.2   # Parsed as 1.0 * e * 0.2
1.e23.4 # Parsed as 1.e23 * 0.4
1.ee2   # Parsed as 1.0 * ee2
1.e23e4 # Parsed as 1.e23 * e4

# Complex number
2j
2.3j
2.j
.2j
2e-34j
.2e-34j
2.e-34j

# Variables
x
abcdefghijklmnopqrstuvwxyz
x_2
x2
x_2_2
_23x    # Error (unknown token)
2_3     # Error (unknown token)
x_y
x_      # Error (unknown token)

# Boolean
True
False
true    # Parsed as variable
TRUE    # Parsed as variable

# Constant
Pi
E
Catalan

# Functions
Sin[2]
Sin[2,3]
Sin[]

# Operators
x + y
x - y
x * y
x %*% y
x / y
x % y
x // y
x ** y
+x
-x
x'
x & y
x | y
x ^ y
!x
x == y
x != y
x < y
x > y
x <= y
x >= y
x = y
(x + y)
x[y, z]
{x, y}
x:y
x:y:z

# Strings
"abc"
"\\\t\n\""
""
"""         # Error (quote is not closed)
"ab         # Error (quote is not closed)
ab"         # Error (quote is not closed)

# Unknown tokens
$
ê°€

## Check starting conditions
# Start with Num/Str/Var/Bool/Fun
2 + 3
Sin[2]
x + y
True & False
"abc" + "def"

# Start with Op
(x + y)
{x, y}
[x, y]
+x
-x
!False
* x     # Error (cannot start with *)
= x     # Error (cannot start with =)

## Check terminal conditions
# Terminate with Fun/Op
2 + Sin     # Error (cannot terminate with Fun)
2 +         # Error (cannot terminate with +)
False!      # Error (cannot terminate with !)
x'
x ==        # Error (cannot terminate with ==)

## Check adjacency rule
# OP + OP
x' + y
(x + y) + z
x' - y
(x + y) - z
x ++ y
x -- y
x +-++-+ y
(((((x))')'))''
x * +y
x / -y
x *** y     # Error (** and * cannot adjacent)
x ***** y   # Error (** and ** cannot adjacent)
x %*%* y    # Error (%*% and * cannot adjacent)
x //// y    # Error (// and // cannot adjacent)
x ==== y    # Error (== and == cannot adjacent)
x +=-+=- y  # Error (- and += cannot adjacent)
!+x
!(x)
!{x}
![x]        # Error (! and [ cannot adjacent)
{{x}}
((x))
Sin[[x]]    # Error ([ and [ cannot adjacent)
(x)(y)
{x}{y}
()          # Error (( and ) cannot adjacent)
{}
Sin[]
Sin[,,]
{Sin[,{(x)},]}
Sin + x
x!y
x y
Sin x

## Check infix to postfix conversion
# Precedence and association
2 * 3 / 4 % 5
2 + 3 * 4
(2 + 3) * 4
2 * (3 + 4)
(2 + 3) * (4 + 5)
(2 + 3) + 4 * (5 - 6) ** 7 / 8 % +9 ** -10
(((2) + 3) * (4 - (5 % 7)))
(2 - (3 + 4 * 5 ** 6) + 7)
(2 - (3 ** 4 * 5 + 6) + 7)
2 - 3 - 4
2 ** 3 ** 4
(2 ** 3) ** 4
-x ** z
-(x ** z)
2:3 * 4:5
2:3:4:5
(2:3):(4:5)
x'[y']'
(x'[y']':!x')'
-(-x'[+y']':-(++-(!x)' ** 2))'
!{x', y'}'
!({x',y'}')''

# Parentheses matching
((((2))))
((((2)))            # Error (parenthesis does not match)
(((2))))            # Error (parenthesis does not match)
(2 + (3 + (4 + 5))  # Error (parenthesis does not match)
2 + (3 + (4 + 5)))  # Error (parenthesis does not match)
Sin[(2 - (3^4 * 5 + 6) + 7)]
Log[2 * 3, 4 + 5]
Log[2 + 3, 4 * 5]
Sin[(2 + 3])        # Error (parenthesis does not match)
(Sin[2 + 3)]        # Error (parenthesis does not match)
Sin[(2 + 3)]
(Sin[2 + 3])
(Sin[2), 1024]      # Error (parenthesis does not match)
Sin[(2, 1024)]      # Error (, is misplaced)
(2, 3)              # Error (, is misplaced)
Sin[2 + Sin[3 + Sin[4,]]]
Sin[Sin[Sin[]]      # Error (parenthesis does not match)
Sin[{2, 3]}         # Error (parenthesis does not match)
Sin[1, {2,]}        # Error (parenthesis does not match)
Sin[{1, 2}]
{Sin[2}, 3]         # Error (parenthesis does not match)
{(Sin[x)]}          # Error (parenthesis does not match)
{}
{,}                 # Error ({ and , cannot adjacent)
Sin[]
Sin[,]
(, 2)               # Error (( and , cannot adjacent)

## Check type checker
# ADD/SUB/MUL/DIV
2 + 3
x + 2
2 + {}
2 + 3j
2j + 3
2j + 3j
2 + "abc"                   # Error (Real + Str)
"abc" + "abc"               # Error (Str + Str)
2 + {{2, 3}, {4, 5}}
2 + {{2, 3}, {4}}
2 + {{2j, 3}, {4, 5}}
2 + {{2j, 3}, {4}}
{{2, 3}, {4, 5}} + 2
{{2, 3}, {4}} + 2
{{2j, 3}, {4, 5}} + 2
{{2j, 3}, {4}} + 2
x + {}
{} + x
"abc" + x
{} + {}                     # Error (List of Void (1 fold) + List of Void (1 fold)
{2, 3} + {4, 5}
{2, 3} + {{2, 3}, {4, 5}}   # Error (List of Real (1 fold) + List of Real (2 fold))
{2, 3} + {{2, 3}, {4}}      # Error (List of Real (1 fold) + List of Real (2 fold))
{} + {2}                    # Error (List of Void (1 fold) + List of Real (1 fold))

# REM/QUOT
2 // 3
x // 3
2 // 3j
3 // "abc"
2 // {{2, 3}, {3, 4}}
2 // {{2, 3}, {4}}
3 // {{2j, 3}, {3, 4}}      # Error (Real // List of Cmplx (2 fold))
2 // {{2j, 3}, {4}}         # Error (Real // List of Cmplx (2 fold))
{{2, 3}, {3, 4}} // 2
{{2, 3}, {4}} // 2
{{2j, 3}, {3, 4}} // 2      # Error (List of Cmplx (2 fold) // Real)
{{2j, 3}, {4}} // 2         # Error (List of Cmplx (2 fold) // Real)
x // {}
{} // x
"abc" // x
{} // {}                    # Error (List of Void (1 fold) // List of Real (1 fold))
{2, 3} // {4, 5}
{2, 3} // {{2, 3}, {4, 5}}  # Error (List of Real (1 fold) // List of Real (2 fold))
{2, 3} // {{2, 3}, {4}}     # Error (List of Real (1 fold) // List of Real (2 fold))
{} // {2}                   # Error (List of Void (1 fold) // List of Real (1 fold))

# MATMUL
{{2, 3}, {4, 5}} %*% {{2, 3}, {4, 5}}
{{2, 3}, {4, 5}} %*% {{2j, 3}, {4, 5}}
{{2, 3}, {4, 5}} %*% {{2}, {4, 5}}
{{2}, {4, 5}} %*% {{2, 3}, {4, 5}}
{{2}, {4, 5}} %*% {{2}, {4, 5}}
{{2j, 3}, {4, 5}} %*% {{2j}, {4, 5}}
{{2, 3}, {4, 5}} %*% {{{2, 3}, {4, 5}}, {{2, 3}, {4, 5}}}
{{2, 3}, {4, 5}} %*% {{{2, 3}, {4, 5}}, {{2, 3}, {4}}}
{{2, 3}, {4, 5}} %*% {{{2j, 3}, {4, 5}}, {{2, 3}, {4}}}
{{{2, 3}, {4, 5}}, {{2, 3}, {4, 5}}} %*% {{2, 3}, {4, 5}}
{{{2, 3}, {4, 5}}, {{2, 3}, {4}}} %*% {{2, 3}, {4, 5}}
{{{2, 3}, {4, 5}}, {{2j, 3}, {4, 5}}} %*% {{2, 3}, {4, 5}}
{{{2, 3}, {4, 5}}, {{2, 3}, {4, 5}}} %*% {{{2, 3}, {4, 5}}, {{2, 3}, {4, 5}}}
{{{2, 3}, {4, 5}}, {{2, 3}, {4, 5}}} %*% {{{{2, 3}, {4, 5}}, {{2, 3}, {4, 5}}}, {{{2, 3}, {4, 5}}, {{2, 3}, {4, 5}}}}   # Error (List of Real (3 fold) %*% List of Real (4 fold))
x %*% {{2, 3}, {4, 5}}
x %*% "abc"
{{},{}} %*% {{},{}}     # Error (List of Void (2 fold) %*% List of Void (2 fold))

# PLUS/MINUS
+2
+True                   # Error (+Bool)
+x
+{2, 3}
+{{2, 3}, {4, 5}}
+{}                     # Error (+List of Void (1 fold))

# TRANS
2'                      # Error (Real')
x'
{2, 3}'                 # Error (List of Real (1 fold)')
{{2, 3}, {4, 5}}'
{{2, 3}", {4}}'
{{"a", "b"}, {"c"}}'
{{{2, 3}, {4, 5}}, {{2, 3}, {4, 5}}}'
{{{2, 3}, {4, 5}}, {{2, 3}, {4}}}'

# EQ/DIFF
2 == x
x == y
2 == True               # Error (Real == Bool)
True == True
"a" == "b"
2j == 3
2 == {4, 5}
2 == {{2, 3}, {4, 5}}
2 == {{2, 3}, {4}}
2 == {{2, 3j}, {4, 5}}
True == {True, False}
"a" == {"b", "c"}
"a" == {2, 3j}          # Error (String == List of Complex (1 fold))
{4, 5} == 2
{{2, 3}, {4, 5}} == 2
{{2, 3}, {4}} == 2
{{2, 3j}, {4, 5}} == 2
{True, False} == True
{"b", "c"} == "a"
{2, 3} == {4, 5}
{True, False} == {True, True}
{"ab", "cd"} == {"ab", "cd"}
{2, 3} == {4j, 5}
{2, 3} == {{2, 3}, {4, 5}}  # Error (List of Real (1 fold) == List of Real (2 fold))
{} == {}                # Error (List of Void (1 fold) == List of Void (1 fold))
{{}} == {}              # Error (List of Void (2 fold) == List of Void (1 fold))

# LEQ/GEQ/BLW/ABV
2 < 3
2 < 3j                  # Error (Real < Complex)
x < 2
2 < x
"a" < "b"
"a" < 2                 # Error (String < Real)
True < False
2 < {2, 3}
2 < {{2, 3}, {4, 5}}
2 < {{2, 3}, {4}}
"a" < {"b", "c"}
True < {True, False}
{2, 3} < 2
{{2, 3}, {4, 5}} < 2
{{2, 3}, {4}} < 2
{"b", "c"} < "a"
{True, False} < True
{1, 2} < {3, 4}
{1, 2} < {{2, 3}, {4, 5}}   # Error (List of Real (1 fold) < List of Real (2 fold))
{} < {}
{{}} < {}

# NEG
!2                      # Error (!Real)
!True
!x
!{True, False}
!{{True, False}, {True, False}}
!{{True, False}, {True}}
!{}
!{{}}

# AND/OR/XOR
True & False
x & 2
True & {True, False}
True & {{True, True}, {False, False}}
True & {{True, True}, {False}}
{True, False} & True
{{True, True}, {False, False}} & True
{{True, True}, {False}} & True
{True, True} & {True, True}
{True, True} & {{True, True}, {False, False}}   # Error (List of Bool (1 fold) & List of Bool (2 fold))

# SEQ
x:y
x:"a"
2:3j                # Error (Real:Complex)
2:3
{2, 3}:4            # Error (Real:List of Real (1 fold))
4:{2, 3}            # Error (Real:List of Real (1 fold))
{2, 3}:{3, 4}       # Error (List of Real (1 fold):List of Real (1 fold))

# IDX
x[1]
1[x]
x["a"]
{2, 3}[2]
{{2, 3}, {4, 5}}[2]
{{2, 3}, {4, 5}}[2, 3]
{{2, 3}, {4}}[2]
{{2, 3}, {4}}[2, 3]
{2, 3}[2, 3]                            # Error (List of Real (1 fold)[Real, Real])
{2, 3}[{4, 5}]
{2, 3}[{2, 3}, 4]                       # Error (List of Real (1 fold)[List of Real (1 fold), Real])
{2, 3}[{2, 3}, {3, 4}]                  # Error (List of Real (1 fold)[List of Real (1 fold), List of Real (1 fold)])
{{2, 3}, {4, 5}}[{2, 3}, {4, 5}]
{{2, 3}, {4, 5}}[{{2, 3}, {4, 5}}, 2]   # Error (List of Real (2 fold)[List of Real (2 fold), Real])
{2, 3}[True]                            # Error (List of Real (1 fold)[Bool])
{2, 3}[True, True]                      # Error (List of Real (1 fold)[Bool, Bool])
{}[]???

# FUN/CMD
Help[Version[]]     # Error (type error)
Sin[Help[]]         # Error (type error)
Help[Sin[2]]        # Error (type error)
Sin[2, 3]           # Error (type error)
Sin[]               # Error (type error)

## Check simplifier of operators
# ADD
# Hoisting
x + y
x + (y + z)
(x + y) + z
(x + y) + (z + w)
x + -(y + z)
-(x + y) + z
-(x + y) + -(z + w)

# Warnings
x + 1000! * 1 + 2               # INF_DETECT
x + -1000! * 1 + 2              # INF_DETECT
x + (0 / 0)                     # NAN_DETECT
x + (1000! * 1) + y + (0 / 0)   # INF_DETECT, NAN_DETECT
x + 1000!                       # BIG_INT
x + -1000!                      # SMALL_INT

# Constant folding
2 + 3 + 4
2 + x + 3 + 4
2 + x + 3 + y + 4
x + (0 / 0)

# Dead expr stripping
x + 0
-x + 0 + -y

# Packing
x + -y + -z
-x + -y
x + 2 + -y + -z
-x + 2 + -y
-x + 2
x + 0 + -y + -z
-x + 0 + -y

# SUB
# Hoisting
x - y
x - -2
x - -y
x - (y + z)
x - (-y + z)
x - (y + -2)
(x + y) - z
(x + y) - -z
(x + y) - -2
(x + y) - (z + w)
(x + y) - (-z + w)
(x + y) - (z + -2)

# Hoisting with premature distribution
x - -(y + z)
x - -(-y + z)
x - -(y + -2)
-(x + y) - z
-(x + y) - -z
-(x + y) - -2
-(x + y) - -(z + w)
-(x + y) - -(-z + w)
-(x + y) - -(z + -2)

# MUL
# Hoisting
x * y
(x * y) * z
x * (y * z)
(x * y) * (z * w)

# Hoisting with premature distribution
-(x * y) * z
x * -(y * z)
-(x * y) * -(z * w)

# Sign propagation
-x * -y * z
-x * y * z

# Warnings
x * (1000! + 1)                 # INF_DETECT
x * (-1000! - 1)                # INF_DETECT
x * (0 / 0)                     # NAN_DETECT
x * (1000! + 1) * y * (0 / 0)   # INF_DETECT, NAN_DETECT

# Constant folding
2 * 3 * 4
2 * x * 3 * 4
2 * x * 3 * y * 4
x * (0 / 0)

# Dead expr stripping
x * 1
-x * 1
x * y * 1
x * -y * 1
x * -1
-x * -1
x * y * -1
x * -y * -1

# Packing
x^-1 * y^-1
x * y^-1 * z^-1
x * 2 * y^-1 * z^-1
x^-1 * 2 * y^-1
-x^-1 * y^-1
-x * y^-1 * z^-1
-x * 2 * y^-1 * z^-1
-x^-1 * 2 * y^-1
x^-1 * 1 * y^-1
x * 1 * y^-1 * z^-1
x^-1 * -1 * y^-1
x * -1 * y^-1 * z^-1
x^-1 * y^-1 * 0
x^-1 * 0

# DIV
# Sign propagation
x / -y
2 / -y
-x / -y

# Hoisting
x / y
x / (y^-1)
x / (y^2)
x / 2
x / 1000!
(x * y) / z
(x * y) / (z^-1)
(x * y) / (z^2)
(x * y) / 2
(x * y) / 0
(x * y) / 1000!
x / (y * z)
x / (y^-1 * z)
x / (y^2 * z)
x / (y * 2)
x / (y * 0)
x / (y * 1000!)
x / (-y * z)
(x * y) / (z * w)
(x * y) / (z^-1 * w)
(x * y) / (z^2 * w)
(x * y) / (z * 2)
(x * y) / (z * 0)
(x * y) / (z * 1000!)

# REM
# Sign propagation
-x % -y

# Warnings
x % 1000!               # BIG_INT
x % -1000!              # SMALL_INT
x % (1000! + 1)         # INF_DETECT
x % (-1000! - 1)        # INF_DETECT
x % (0 / 0)             # NAN_DETCT
(1000! + 1) % x         # INF_DETECT
(0 / 0) % x             # NAN_DETCT
1000! % x               # BIG_INT
-1000! % x              # SMALL_INT
(1000! + 1) % (0 / 0)   # INF_DETECT, NAN_DETECT
x % 0                   # POLE_DETECT

# Constant folding
2.1 % 2.3
-2.1 % 2.3
2.1 % -2.3
-2.1 % -2.3

# Dead expr stripping
x % (0 / 0)
(0 / 0) % x
x % 0
1000! % x
-1000! % x

# FACT
# Warnings
(-1)!           # POLE_DETECT
(1000! + 1)!    # INF_DETECT
(-1000! - 1)!   # INF_DETECT
(0 / 0)!        # NAN_DETECT
1000!!          # BIG_INT
(-1000!)!       # POLE_DETECT

# Constant folding
6!
6.3!
(-1.3)!

# POW
# Sign propagation
(-x)^3
(-x)^(-3)

# Warnings
(1000! + 1)^2   # INF_DETECT
(-1000! - 1)^2  # INF_DETECT
(0 / 0)^2       # NAN_DETECT
2^(1000! + 1)   # INF_DETECT
2^(0 / 0)       # NAN_DETECT
0^(-2)          # POLE_DETECT
0^(-2.1)        # DOMAIN_OUT
0^2.1
(-2.1)^2
(-2.1)^2.1      # DOMAIN_OUT
(-2.1)^(-2)
(-2.1)^(-2.1)   # DOMAIN_OUT
1000!^2         # BIG_INT
(-1000!)^2      # SMALL_INT
2^1000!         # BIG_INT
2^(-1000!)      # SMALL_INT

# Hoisting
(x^2)^3
((2^x)^3)^4
((x^2)^3)^y

# Dead expr stripping
x^1
(-x)^1
x^0
(-x)^0
(-x)^2
(-x)^(-2)
x^(0 / 0)

# PLUS
# Dead expr stripping
+x
+2

# MINUS
# Constant folding
-2

# Dead expr stripping
--2
--x
-(x * 2)
-(x / 2)
-(x * -2)
-(x / -2)

# Unpacking
2 + -(x + 3)
2 - -(x + 3)
-(x + 3) + 2
-(x + 3) - 2
-(x - 3) + -(y + 2)
-(x - 3) - -(y + 2)
2 * -(x * 3)
2 / -(x * 3)
-(x * 3) * 2
-(x * 3) / 2
-(x / 3) * -(y * 2)
-(x / 3) / -(y * 2)
-(-x * -3) * 2
-(-x * -3) / 2
-(-x / -3) * -(y * 2)
-(-x / -3) / -(y * 2)

## Check simplifier of trigonometric functions
# Sin
# Warnings
Sin[0 / 0]      # NAN_DETECT
Sin[1000! + 1]  # INF_DETECT
Sin[-1000! - 1] # INF_DETECT
Sin[1000!]      # BIG_INT
Sin[-1000!]     # SMALL_INT

# Constant folding
Sin[2]

# Sign propagation
Sin[-x]

# Cos
# Warnings
Cos[0 / 0]      # NAN_DETECT
Cos[1000! + 1]  # INF_DETECT
Cos[-1000! - 1] # INF_DETECT
Cos[1000!]      # BIG_INT
Cos[-1000!]     # SMALL_INT

# Constant folding
Cos[2]

# Dead expr stripping
Cos[-x]

# Tan
# Warnings
Tan[0 / 0]      # NAN_DETECT
Tan[1000! + 1]  # INF_DETECT
Tan[-1000! - 1] # INF_DETECT
Tan[10.5 * Pi]  # POLE_DETECT
Tan[1000!]      # BIG_INT
Tan[-1000!]     # SMALL_INT

# Constant folding
Tan[2]

# Sign propagation
Tan[-x]

# Csc
# Warnings
Csc[0 / 0]      # NAN_DETECT
Csc[1000! + 1]  # INF_DETECT
Csc[-1000! - 1] # INF_DETECT
Csc[1000!]      # BIG_INT
Csc[-1000!]     # SMALL_INT
Csc[10 * Pi]    # POLE_DETECT

# Constant folding
Csc[2]

# Sign propagation
Csc[-x]

# Sec
# Warnings
Sec[0 / 0]      # NAN_DETECT
Sec[1000! + 1]  # INF_DETECT
Sec[-1000! - 1] # INF_DETECT
Sec[1000!]      # BIG_INT
Sec[-1000!]     # SMALL_INT
Sec[10.5 * Pi]  # POLE_DETECT

# Constant folding
# Sec[2]

# Dead expr stripping
Sec[-x]

# Cot
# Warnings
Cot[0 / 0]      # NAN_DETECT
Cot[1000! + 1]  # INF_DETECT
Cot[-1000! - 1] # INF_DETECT
Cot[1000!]      # BIG_INT
Cot[-1000!]     # SMALL_INT
Cot[10 * Pi]    # POLE_DETECT

# Constant folding
Cot[2]

# Sign propagation
Cot[-x]

# Asin
# Warnings
Asin[0 / 0]         # NAN_DETECT
Asin[1000! + 1]     # INF_DETECT
Asin[-1000! - 1]    # INF_DETECT
Asin[2]             # DOMAIN_OUT
Asin[1000!]         # DOMAIN_OUT
Asin[-1000!]        # DOMAIN_OUT

# Constant folding
Asin[1]

# Sign propagation
Asin[-x]

# Acos
# Warnings
Acos[0 / 0]         # NAN_DETECT
Acos[1000! + 1]     # INF_DETECT
Acos[-1000! - 1]    # INF_DETECT
Acos[2]             # DOMAIN_OUT
Acos[1000!]         # DOMAIN_OUT
Acos[-1000!]        # DOMAIN_OUT

# Constant folding
Acos[1]

# Atan
# Warnings
Atan[0 / 0]         # NAN_DETECT
Atan[1000! + 1]     # INF_DETECT
Atan[-1000! - 1]    # INF_DETECT
Atan[1000!]         # BIG_INT
Atan[-1000!]        # SMALL_INT

# Constant folding
Atan[2]

# Sign propagation
Atan[-x]

# Acsc
# Warnings
Acsc[0 / 0]         # NAN_DETECT
Acsc[1000! + 1]     # INF_DETECT
Acsc[-1000! - 1]    # INF_DETECT
Acsc[1000!]         # BIG_INT
Acsc[-1000!]        # SMALL_INT
Acsc[0]             # POLE_DETECT

# Constant folding
Acsc[2]
Acsc[-1]
Acsc[1]

# Sign propagation
Acsc[-x]

# Asec
# Warnings
Asec[0 / 0]         # NAN_DETECT
Asec[1000! + 1]     # INF_DETECT
Asec[-1000! - 1]    # INF_DETECT
Asec[1000!]         # BIG_INT
Asec[-1000!]        # SMALL_INT
Asec[0]             # POLE_DETECT

# Constant folding
Asec[2]
Asec[-1]
Asec[1]

# Acot
# Warnings
Acot[0 / 0]         # NAN_DETECT
Acot[1000! + 1]     # INF_DETECT
Acot[-1000! - 1]    # INF_DETECT
Acot[1000!]         # BIG_INT
Acot[-1000!]        # SMALL_INT

# Constant folding
Acot[-2]
Acot[2]
Acot[0]

## Check timeout
Sleep[2.9]  # Can be evaluated in 3sec.
Sleep[3.1]  # Error (timeout)

## Check eval of utility commands
# Sleep
Sleep[0 / 0]        # Error (invalid parameter)
Sleep[1000! + 1]    # Error (invalid parameter)
Sleep[-1000! - 1]   # Error (invalid parameter)
Sleep[1000!]        # Error (invalid parameter)
Sleep[-1000!]       # Error (invalid parameter)
Sleep[-2]           # Error (invalid parameter)
Sleep[2]
Sleep[0]
Sleep[2.1]

# Set_sys_var
Set_sys_var["AAA", 1]                           # Error (there is no system variable "AAA")
Set_sys_var["Version", "1.1.1"]                 # Error ("Version" is read-only)
Set_sys_var["Computation_Timeout", -1]          # Error (invalid parameter)
Set_sys_var["Computation_Timeout", 0 / 0]       # Error (invalid parameter)
Set_sys_var["Computation_Timeout", 1000! + 1]   # INF_DETECT
Set_sys_var["Computation_Timeout", -1000! - 1]  # Error (invalid parameter)
Set_sys_var["Computation_Timeout", 1000!]       # BIG_INT
Set_sys_var["Computation_Timeout", -1000!]      # Error (invalid parameter)
Set_sys_var["Computation_Timeout", 10.2]        # DOMAIN_OUT
Set_sys_var["Computation_Timeout", 0]           # TURN_OFF
Set_sys_var["Computation_Timeout", 1]
Sleep[3]                                        # Error (timeout)
Set_sys_var["Computation_Timeout", 3]           # Reset.

# Get_sys_var
Get_sys_var["AAA"]
Get_sys_var["Author"]
Get_sys_var["Version"]
Get_sys_var["Input_Timeout"]
Get_sys_var["Computation_Timeout"]

## Check simplifier of hyperbolic trigonometric functions
# Sinh
# Warnings
Sinh[0 / 0]         # NAN_DETECT
Sinh[1000! + 1]     # INF_DETECT
Sinh[-1000! - 1]    # INF_DETECT
Sinh[1000!]         # BIG_INT
Sinh[-1000!]        # SMALL_INT

# Constant folding
Sinh[2]

# Sign propagation
Sinh[-x]

# Function coalescing
Sinh[Asinh[x]]
Sinh[-Asinh[x]]

# Cosh
# Warnings
Cosh[0 / 0]         # NAN_DETECT
Cosh[1000! + 1]     # INF_DETECT
Cosh[-1000! - 1]    # INF_DETECT
Cosh[1000!]         # BIG_INT
Cosh[-1000!]        # SMALL_INT

# Constant folding
Cosh[2]

# Dead expr stripping
Cosh[-x]

# Function coalescing
Cosh[Acosh[x]]
Cosh[-Acosh[x]]

# Tanh
# Warnings
Tanh[0 / 0]         # NAN_DETECT
Tanh[1000! + 1]     # INF_DETECT
Tanh[-1000! - 1]    # INF_DETECT
Tanh[1000!]         # BIG_INT
Tanh[-1000!]        # SMALL_INT

# Constant folding
Tanh[2]

# Sign propagation
Tanh[-x]

# Function coalescing
Tanh[Atanh[x]]
Tanh[-Atanh[x]]

# Asinh
# Warnings
Asinh[0 / 0]        # NAN_DETECT
Asinh[1000! + 1]    # INF_DETECT
Asinh[-1000! - 1]   # INF_DETECT
Asinh[1000!]        # BIG_INT
Asinh[-1000!]       # SMALL_INT

# Constant folding
Asinh[2]

# Sign propagation
Asinh[-x]

# Function coalescing
Asinh[Sinh[x]]
Asinh[-Sinh[x]]

# Acosh
# Warnings
Acosh[0 / 0]        # NwAN_DETECT
Acosh[1000! + 1]    # INF_DETECT
Acosh[-1000! - 1]   # INF_DETECT
Acosh[0]            # DOMAIN_OUT
Acosh[1000!]        # BIG_INT
Acosh[-1000!]       # DOMAIN_OUT
Atanh[1]            # POLE_DETECT
Atanh[-1]           # POLE_DETECT

# Constant folding
Acosh[2]

# Atanh
# Warnings
Atanh[0 / 0]        # NAN_DETECT
Atanh[1000! + 1]    # INF_DETECT
Atanh[-1000! - 1]   # INF_DETECT
Atanh[1000!]        # DOMAIN_OUT
Atanh[-1000!]       # DOMAIN_OUT
Atanh[-2]           # DOMAIN_OUT
Atanh[2]            # DOMAIN_OUT

# Constant folding
Atanh[0]

# Sign propagation
Atanh[-x]

# Function coalescing
Atanh[Tanh[x]]
Atanh[-Tanh[x]]

## Check simplifier of hyperbolic special functions
# Gamma function
# Warnings
Gamma[0 / 0]        # NAN_DETECT
Gamma[1000! + 1]    # INF_DETECT
Gamma[-1000! - 1]   # INF_DETECT
Gamma[1000!]        # BIG_INT
Gamma[-1000!]       # POLE_DETECT
Gamma[-2]           # POLE_DETECT

# Constant folding
Gamma[2]
Gamma[2.2]
Gamma[-2.2]

# Loggamma function
# Warnings
Lgamma[0 / 0]       # NAN_DETECT
Lgamma[1000! + 1]   # INF_DETECT
Lgamma[-1000! - 1]  # INF_DETECT
Lgamma[1000!]       # BIG_INT
Lgamma[-1000!]      # POLE_DETECT
Lgamma[-2]          # POLE_DETECT

# Constant folding
Lgamma[2]
Lgamma[2.2]
Lgamma[-2.2]

# Error function
# Warnings
Erf[0 / 0]      # NAN_DETECT
Erf[1000! + 1]  # INF_DETECT
Erf[-1000! - 1] # INF_DETECT
Erf[1000!]      # BIG_INT
Erf[-1000!]     # SMALL_INT

# Constant folding
Erf[2]

# Sign propagation
Erf[-x]

# Complementary error function
# Warnings
Erfc[0 / 0]         # NAN_DETECT
Erfc[1000! + 1]     # INF_DETECT
Erfc[-1000! - 1]    # INF_DETECT
Erfc[1000!]         # BIG_INT
Erfc[-1000!]        # SMALL_INT

# Constant folding
Erfc[2]